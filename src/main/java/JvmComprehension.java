
//Класс JvmComprehension загружается через подсистему загрузчиков классов - ClassLoaders, где ищется данный
//класс по очереди на 3-х уровнях: bootstrap, platform, application. Если класс находится на каком-то из уровней,
//то происходит его загрузка, также предварительно осуществляется его проверка на то, что код валиден, подготовка
// примитивов статических полей, связывание ссылок на другие классы(если есть).
// Данные об этом классе перемещаются для хранения в metaspace.

public class JvmComprehension {

    public static void main(String[] args) { //В стэке формируется фрейм main
        int i = 1;                      // 1 в фрейме main создается переменная  i, ей присваивается значение 1
        Object o = new Object();        // 2 переменная о создается в стэке фрейма main и хранит в себе ссылку на объект
                                        // new Object  - новый объект создается для хранения в heap.
        Integer ii = 2;                 // 3 Integer ссылочная переменная, поэтому переменная ii
                                        // представляет собой ссылку на  объект Integer, который создается в heap.
        printAll(o, i, ii);             // 4 в стэке формируется фрейм printAll, в нем создаются переменные o и ii,
                                        //которые содержат в себе ссылки на свои обекты в куче.
                                        //и создается переменная i, которая является копией переменной из стэка main
        System.out.println("finished"); // 7 в стэке формируется фрейм println, в котором создается ссылка на объект
                                        // String, значение которого "finished". Сам же объект типа String создается в куче
    }
    // Код программы выполняется строка за строкой, каждый метод компиляруется по очереди в машинный код, интерпритатор
    // интерпретирует машинный код строка за строкой, затем выполняет. Периодически сборщик мусора собирает объекты,
    // которые больше не используются, из памяти путем обхода графа достижимых объектов. Обычно при сборке мусора
    //приостанавливается работа всей программы.

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;                   // 5 в стэке во фрейме printAll для хранения создается  переменная
                                                    // uselessVar, которая хранит в себе ссылку на объект Integer. Сам
                                                    // объект со значением 700 хранится в куче.
        System.out.println(o.toString() + i + ii);  // 6 в стэке фомируется фреймы println и toString. В фрейм println
                                                    // передаются переменные i со значением 1, ii, o, последние из которых хранят ссылки на объекты
                                                    // Object o, Integer ii.
    }
}